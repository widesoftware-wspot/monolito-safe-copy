<?php

namespace Wideti\DomainBundle\Document\Repository;

use Doctrine\MongoDB\Cursor;
use Doctrine\ODM\MongoDB\DocumentRepository;
use MongoDate;
use Wideti\DomainBundle\Document\Group\Group;
use Wideti\DomainBundle\Document\Guest\Social;
use Wideti\DomainBundle\Helpers\DateTimeHelper;
use Wideti\DomainBundle\Service\SmsMarketing\Dto\TotalGuestsFilter;
use Wideti\WebFrameworkBundle\Aware\LoggerAware;

/**
 * GuestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GuestRepository extends DocumentRepository
{
    use LoggerAware;
    /**
     * @param array $params
     * @param null $download
     * @return \Doctrine\ODM\MongoDB\Query\Query
     * @throws \MongoException
     */
    public function searchQuery($params = [], $download = null, $fromVariableField = false) ##-## ????
    {
        $maxReportLines     = 1000;
        $maxReportLinesPoc  = (array_key_exists('maxReportLinesPoc', $params)) ? $params['maxReportLinesPoc'] : null;
        $filters            = array_key_exists('filters', $params) ? $params['filters'] : $params;

        $guests = $this->createQueryBuilder()
            ->select()
            ->sort(['mysql' => -1])
        ;


        if (isset($filters) && $this->isFiltered($filters)) {
            $fromVariableField = $fromVariableField && !isset($filters['value']);
            if ($fromVariableField) {
                $identifier = str_replace('properties.', '', $filters['filtro']);
                $field = $this->getDocumentManager()
                ->getRepository('DomainBundle:CustomFields\Field')
                ->findOneBy(['identifier' => $identifier]);

                if ($field->getType() == "choice" || $field->getType() == "multiple_choice") {
                    $filterValue = $filters['value_' . $identifier ];
                    if ($filterValue == "none") {
                        $guests->addOr($guests->expr()->field($filters['filtro'])->equals(""));
                        $guests->addOr($guests->expr()->field($filters['filtro'])->exists(false));
                    } else if ($filterValue == "all") {
                        $guests->field($filters['filtro'])->notEqual("");
                        $guests->field($filters['filtro'])->exists(true);
                    } else {
                        $choices = $field->getChoices()["pt_br"];
                        $position = 0;
                        foreach ($choices as $key => $choice) {
                            if ($key == $filterValue) {
                                break;
                            }
                            $position += 1;
                        }
                        $choicePt = array_values($choices)[$position];
                        $choiceEn = array_values($field->getChoices()["en"])[$position];
                        $choiceEs = array_values($field->getChoices()["es"])[$position];
                        if ($field->getType() == "multiple_choice") {
                            $choicePt =  new \MongoRegex("/". $choicePt ."/");
                            $choiceEn = new \MongoRegex("/". $choiceEn ."/");
                            $choiceEs = new \MongoRegex("/". $choiceEs ."/");
                        }
                        $guests->addOr($guests->expr()->field($filters['filtro'])->equals($choicePt));
                        $guests->addOr($guests->expr()->field($filters['filtro'])->equals($choiceEn));
                        $guests->addOr($guests->expr()->field($filters['filtro'])->equals($choiceEs));
                    }
                } else {
                    $guests->field($filters['filtro'])
                    ->equals(new \MongoRegex("/.*".$filters['value_' . $identifier ].".*/i"));
                }
            } else {
                $guests->field($filters['filtro'])
                ->equals(new \MongoRegex("/.*".$filters['value'].".*/i"));
            }
        }

        if (isset($filters['filtro']) && $this->hasFilter($filters,'properties.data_nascimento' )) {

            try {
                $birthDate = $this->createMongoDateFromString($filters['value']);
                $guests->field($filters['filtro'])->equals($birthDate);
            } catch (\Exception $e) {
                $this->logger->addWarning("Fail to create date from birthdate filter");
            }

        }

        if (isset($filters['status']) && $filters["status"] !== "all" && $filters["status"] !== null) {
            $guests->field("status")
                ->equals((int)$filters["status"]);
        }

        if (isset($filters['group']) && $filters["group"] !== "all" && $filters["group"] !== null) {
            $group = $filters['group'];
            if ($group == 'guest') {
                $guests->addOr($guests->expr()->field("group")->exists(false));
                $guests->addOr($guests->expr()->field("group")->equals('guest'));
            } else {
                $guests->addOr($guests->expr()->field("group")->equals($group));
            }
        }

        if (isset($filters)) {
            if (array_key_exists('dateFrom', $filters) && isset($filters['dateFrom']) &&
                array_key_exists('dateTo', $filters) && isset($filters['dateTo'])
            ) {
                $dateFrom   = date_format(new \DateTime(str_replace('/', '-', $filters['dateFrom'])), 'd-m-Y 00:00:00');
                $dateTo     = date_format(new \DateTime(str_replace('/', '-', $filters['dateTo'])), 'd-m-Y 23:59:59');

                $guests->field('created')
                    ->gte(new \MongoDate(strtotime($dateFrom)))
                    ->lte(new \MongoDate(strtotime($dateTo)))
                ;
            }
        }

        if ($maxReportLinesPoc) {
            $guests->limit($maxReportLinesPoc);
        }

        if ($download) {
            $guests->skip($params['skip']);
            $guests->limit(($maxReportLinesPoc) ? $maxReportLinesPoc : $maxReportLines);
        }

        if (isset($filters["hasConsentRevoke"]) && $filters["hasConsentRevoke"] === true) {
            $guests->field('hasConsentRevoke')->notEqual(true);
        }

        return $guests->getQuery();
    }

    public function getConsentRevokesId()
    {
        $guests = $this->createQueryBuilder()
            ->select()
            ->sort(['mysql' => -1]);

        $guests->field('hasConsentRevoke')->equals(true);
        return $guests->getQuery();
    }

    public function search($filters = [], $download = null, $fromVariableField = false)
    {
        return $this->searchQuery($filters, $download, $fromVariableField)->execute(); #-##
    }

    public function countByFilter($filters = [], $download = null, $fromVariableField = false)
    {
        return $this->searchQuery($filters, null, $fromVariableField)->count(); ##-##
    }

    public function count()
    {
        $qb = $this->createQueryBuilder();
        $qb->addOr($qb->expr()->field('group')->exists(false));
        $qb->addOr($qb->expr()->field('group')->equals('guest'));
        $count = $qb->getQuery()->count();
        return $count;
    }

    public function countPerPeriod($amountOfDays)
    {
        $lastDays = date_format(new \DateTime("now -".$amountOfDays." days"), 'd-m-Y 00:00:00');

        $qb = $this->createQueryBuilder();

        $query = $qb->select()
            ->field('created')->gte(new \MongoDate(strtotime($lastDays)))
            ->addOr($qb->expr()->field('group')->exists(false))
            ->addOr($qb->expr()->field('group')->equals('guest'))
            ->getQuery();

        return $query->count();
    }

    public function findByDocument($document)
    {
        if (empty($document)) {
            return false;
        }

        $collection = $this->getDocumentManager()
            ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
            ->find([
                '$or' => [
                    [
                        'properties.document' => $document
                    ],
                    [
                        'properties.document' => preg_replace('/[^0-9]/', null, $document)
                    ]
                ]
            ]);

        $result = $collection->toArray();

        if (empty($result)) {
            return false;
        }

        return $result;
    }

    public function findLikeEmail($email)
    {
        if (empty($email)) {
            return false;
        }

        $qb = $this->createQueryBuilder()
            ->select()
            ->field('properties.email')->equals(new \MongoRegex('/.*'.$email.'.*/i'))
            ->getQuery()
            ->getSingleResult()
        ;

        if ($qb === null) {
            return 0;
        }
        return $qb;
    }

    public function findLikeCustomField($field, $value)
    {
        if (empty($value)) {
            return false;
        }

        $qb = $this->createQueryBuilder()
            ->select()
            ->field("properties.{$field}")->equals(new \MongoRegex('/.*'.$value.'.*/i'))
            ->getQuery()
            ->getSingleResult()
        ;

        if ($qb === null) {
            return 0;
        }

        return $qb;
    }

    public function listRegisterPerDay(array $parameters = [])
    {
        $params = array_replace([
            "format"    => '%d/%m/%Y',
            "filters"   => [],
            "from"      => null,
            "to"        => null
        ], $parameters);

        $amountOfDays = (array_key_exists('amountOfDays', $parameters)) ? $params['amountOfDays'] : null;

        if ($amountOfDays) {
            $params["from"] = date_format(new \DateTime("now -".$amountOfDays." days"), 'd-m-Y 00:00:00');
        }

        if (!$params["from"] && !$amountOfDays) {
            $params["from"] = date_format(new \DateTime('now -7 days'), 'd-m-Y 00:00:00');
        }

        if (!$params["to"]) {
            $params["to"] = date_format(new \DateTime('now'), 'd-m-Y 23:59:59');
        }

        $filters[] = [
            'created' => [
                '$gte' => new \MongoDate(strtotime($params["from"])),
                '$lte' => new \MongoDate(strtotime($params["to"]))
            ],
            '$or' => [
                ['group' => ['$ne' => Group::GROUP_EMPLOYEE]]
            ]
        ];

        $match = [
            '$match' => [
                '$and' => $filters
            ]
        ];

        if (isset($params["filters"]['accessPoints'])) {
            $orFilters = [];

            foreach ($params["filters"]['accessPoints'] as $ap) {
                $orFilters[] = [
                    'registrationMacAddress' => $ap
                ];
            }

            if (count($orFilters) > 0) {
                $match['$match']['$or'] = $orFilters;
            }
        }

        $collection = $this->getDocumentManager()
            ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
            ->aggregate(
                [
                    $match,
                    [
                        '$project' => [
                            'zonedCreateDate' => [
                                '$subtract' => ['$created', DateTimeHelper::timezoneDifference()]
                            ]
                        ]
                    ],
                    [
                        '$group' => [
                            '_id' => [
                                'day'   => [ '$dayOfMonth' => '$zonedCreateDate' ],
                                'month' => [ '$month' => '$zonedCreateDate' ],
                                'year'  => [ '$year' => '$zonedCreateDate' ],
                                'formatted' => [
                                    '$dateToString' => [
                                        'format' => $params["format"],
                                        'date' => '$zonedCreateDate'
                                    ]
                                ]
                            ],
                            'total' => [ '$sum' => 1 ]
                        ]
                    ]
                ]
            )
        ;

        $result = $collection->toArray();

        $fields = [];

        foreach ($result as $data) {
            $fields[] = [
                'dataCadastro'  => $data['_id']['year'].'-'.$data['_id']['month'].'-'.$data['_id']['day'],
                'total'         => $data['total'],
                'formatted'     => $data['_id']['formatted'],
                'period'        => date('Y-m-d', strtotime("{$data['_id']['year']}-{$data['_id']['month']}-{$data['_id']['day']}"))
            ];
        }

        return $fields;
    }

    public function listRegisterPerDayOfWeek(array $parameters = [])
    {
        $params = array_replace([
            "filters"   => [],
            "from"      => null,
            "to"        => null
        ], $parameters);

        $filters[] = [
            'created' => [
                '$gte' => new \MongoDate(strtotime($params["from"])),
                '$lte' => new \MongoDate(strtotime($params["to"]))
            ],
            '$or' => [
                ['group' => ['$ne' => Group::GROUP_EMPLOYEE]]
            ]
        ];

        $match = [
            '$match' => [
                '$and' => $filters
            ]
        ];

        if (isset($params["filters"]['accessPoints'])) {
            $orFilters = [];

            foreach ($params["filters"]['accessPoints'] as $ap) {
                $orFilters[] = [
                    'registrationMacAddress' => $ap
                ];
            }

            if (count($orFilters) > 0) {
                $match['$match']['$or'] = $orFilters;
            }
        }

        $collection = $this->getDocumentManager()
            ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
            ->aggregate(
                [
                    $match,
                    [
                        '$project' => [
                            'zonedCreateDate' => [
                                '$subtract' => ['$created', DateTimeHelper::timezoneDifference()]
                            ]
                        ]
                    ],
                    [
                        '$group' => [
                            '_id' => [
                                'dayOfWeek' => [ '$dayOfWeek' => '$zonedCreateDate' ]
                            ],
                            'total' => [ '$sum' => 1 ]
                        ]
                    ]
                ]
            )
        ;

        $result = $collection->toArray();

        $fields = [];

        foreach ($result as $data) {
            $fields[] = [
                'dayOfWeek'     => $data['_id']['dayOfWeek'],
                'total'         => $data['total']
            ];
        }
        return $fields;
    }

    public function graphGuestCharts($amountOfDays)
    {
        $registerPerDay = $this->listRegisterPerDay([
            'amountOfDays' => $amountOfDays
        ]);

        $guests['signUps'] = [];
        $signUps           = [];

        $interval = new \DatePeriod(
            new \DateTime("now -".$amountOfDays." days"),
            new \DateInterval('P1D'),
            new \DateTime('now')
        );

        foreach ($interval as $date) {
            $dates[$date->format('d/m')] = 0;
        }

        $dates = array_reverse($dates);

        foreach ($registerPerDay as $value) {
            $date = new \DateTime($value['dataCadastro']);
            $signUps[$date->format('d/m')] = (integer) $value['total'];
        }

        $newSignUps = [];

        foreach ($dates as $key => $value) {
            if (isset($signUps[$key])) {
                $newSignUps[$key] = (integer) $signUps[$key];
            } else {
                $newSignUps[$key] = 0;
            }
        }

        $guests['signUps']      = array_values($newSignUps);
        $guests['categories']   = array_keys($dates);

        return $guests;
    }

    public function countUniqueOrReturning($status = null, $period = null, $filterRangeDate = null)
    {
        $qb = $this->createQueryBuilder();
        $qb->addOr($qb->expr()->field('group')->exists(false));
        $qb->addOr($qb->expr()->field('group')->equals('guest'));

        if ($status) {
            switch ($status) {
                case 'unique':
                    $qb->field('returning')->equals(false);
                    break;
                case 'returning':
                    $qb->field('returning')->equals(true);
                    break;
            }
        }

        if ($period) {
            $dateFrom = date_format(new \DateTime('now -'.$period.' days'), 'd-m-Y 00:00:00');
            $dateTo   = date_format(new \DateTime('now'), 'd-m-Y 23:59:59');

            $qb->field('lastAccess')->gte(new \MongoDate(strtotime($dateFrom)));
            $qb->field('lastAccess')->lte(new \MongoDate(strtotime($dateTo)));
        }

        if ($filterRangeDate && $status == 'unique') {
            $qb->field('created')->gte(new \MongoDate(strtotime($filterRangeDate['date_from'])));
            $qb->field('created')->lte(new \MongoDate(strtotime($filterRangeDate['date_to'])));
        }

        if ($filterRangeDate && $status == 'returning') {
            $qb->field('lastAccess')->gte(new \MongoDate(strtotime($filterRangeDate['date_from'])));
            $qb->field('lastAccess')->lte(new \MongoDate(strtotime($filterRangeDate['date_to'])));
        }


        return $qb->getQuery()->count();
    }

    public function getUniqueOrReturning(
        $params,
        $dateFrom,
        $dateTo,
        $download = null
    ) {
        $maxReportLinesPoc  = $params['maxReportLinesPoc'];
        $filter             = $params['filters'];

        $rangeBy = isset($filter['range_by']) ? $filter['range_by'] : 'lastAccess';

        $filters = [];

        if ($filter == 'returning') {
            $filters[] = [
                'returning' => true
            ];
        } elseif ($filter == 'unique') {
            $filters[] = [
                'returning' => false
            ];
        } elseif ($filter && array_key_exists('filter', $filter) && $filter['filter'] != null) {
            $filters[] = [
                'returning' => ($filter['filter'] == 'returning') ? true : false
            ];
        }

        $filters[] = [
            $rangeBy => [
                '$gte' => new \MongoDate(strtotime($dateFrom)),
                '$lte' => new \MongoDate(strtotime($dateTo))
            ],
            '$or' => [
                ['group' => ['$ne' => Group::GROUP_EMPLOYEE]]
            ]
        ];

        $match = [
            '$match' => [
                '$and' => $filters
            ]
        ];

        $skip  = 0;
        $limit = ($maxReportLinesPoc) ? $maxReportLinesPoc : 700;

        if ($download) {
            $skip = $params['skip'];
            $limit = ($maxReportLinesPoc) ? $maxReportLinesPoc : 1000;
        }

        $collection = $this->getDocumentManager()
            ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
            ->aggregate(
                [
                    ['$skip' => $skip],
                    ['$limit' => $limit],
                    $match
                ]
            )
        ;

        $result = $collection->toArray();

        return $result;
    }

    public function graphRegisterMode($filterRangeDate = null)
    {
        $registerMode     = $this->getRegisterMode($filterRangeDate);
        $registerByForm   = $registerMode['form'];
        $registerBySocial = $registerMode['social'];
        $registerByFormArray   = array();
        $registerBySocialArray = array();

        array_push(
            $registerByFormArray,
            array(
                'label' => 'Formulário',
                'data' => (integer) $registerByForm,
            )
        );

        foreach ($registerBySocial as $value) {
            array_push(
                $registerBySocialArray,
                array(
                    'label' => $this->convertSocialTypeInString($value['_id']),
                    'data' => (integer) $value['total'],
                )
            );
        }

        return array_merge($registerByFormArray, $registerBySocialArray);
    }

    public function getRegisterMode($filterRangeDate = null)
    {
        if (empty($filterRangeDate)) {
            $filterRangeDate['date_from'] = date("Y-m-d H:m:s", strtotime("-30 days"));
            $filterRangeDate['date_to'] = date("Y-m-d H:m:s");
        }

        $collection = $this->getDocumentManager()
            ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
            ->aggregate([
                [
                    '$unwind' => '$social'
                ],
                [
                    '$match' => [
                        'created' => [
                            '$gte' => new \MongoDate(strtotime($filterRangeDate['date_from'])),
                            '$lte' => new \MongoDate(strtotime($filterRangeDate['date_to']))
                        ]
                    ]
                ],
                [
                    '$group' => [
                        '_id'   => '$social.type',
                        'total' => [ '$sum' => 1 ]
                    ]
                ]
            ])
        ;

        $result['social'] = $collection->toArray();

        $form = $this->createQueryBuilder();
        $form->field('created')
            ->gte(new \MongoDate(strtotime($filterRangeDate['date_from'])))
            ->lte(new \MongoDate(strtotime($filterRangeDate['date_to'])))
        ;

        $form = $form->getQuery();

        $totalSocial = ($result['social']) ? $result['social'][0]['total'] : 0;

        $result['form'] = $form->count() - $totalSocial;

        return $result;
    }

    public function convertSocialTypeInString($type)
    {
        $registerMode = "";

        switch ($type) {
            case Social::FACEBOOK:
                $registerMode = 'Facebook';
                break;
            case Social::TWITTER:
                $registerMode = 'Twitter';
                break;
            case Social::GOOGLE:
                $registerMode = 'Google';
                break;
            case Social::INSTAGRAM:
                $registerMode = 'Instagram';
                break;
            case Social::LINKEDIN:
                $registerMode = 'LinkedIn';
                break;
        }

        return $registerMode;
    }

    public function updateStatusByStatus($newStatus, array $statuses = [])
    {
        if (count($statuses) === 0) {
            return false;
        }

        $query = $this->createQueryBuilder()
            ->update()
            ->multiple(true)
            ->field("status")->set($newStatus)
            ->field("status")->in($statuses)
            ->getQuery()
            ->execute()
        ;

        return $query;
    }

    public function getMostRegisteredByAp(array $parameters = [])
    {
        $params = array_replace([
            "filters"   => [],
            "from"      => null,
            "to"        => null
        ], $parameters);

        $filters[] = [
            'created' => [
                '$gte' => new \MongoDate(strtotime(date_format($params["from"], 'Y-m-d 00:00:00'))),
                '$lte' => new \MongoDate(strtotime(date_format($params["to"], 'Y-m-d 23:59:59')))
            ],
            '$or' => [
                ['group' => ['$ne' => Group::GROUP_EMPLOYEE]]
            ]
        ];

        $match = [
            '$match' => [
                '$and' => $filters
            ]
        ];

        if ($params["filters"]['accessPoints']) {
            $orFilters = [];

            foreach ($params["filters"]['accessPoints'] as $ap) {
                $orFilters[] = [
                    'registrationMacAddress' => $ap
                ];
            }

            if (count($orFilters) > 0) {
                $match['$match']['$or'] = $orFilters;
            }
        }

        $collection = $this->getDocumentManager()
            ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
            ->aggregate(
                [
                    $match,
                    [
                        '$group' => [
                            '_id'   => '$registrationMacAddress',
                            'total' => [ '$sum' => 1 ]
                        ]
                    ],
                    [
                        '$sort' => [
                            'total' => -1
                        ]
                    ],
                    [
                        '$limit' => 10
                    ]
                ]
            )
        ;

        $result = $collection->toArray();

        return $result;
    }

    public function getMostRegisteredByHour(array $parameters = [])
    {
        $params = array_replace([
            "filters"   => [],
            "from"      => null,
            "to"        => null
        ], $parameters);

        $filters[] = [
            'created' => [
                '$gte' => new \MongoDate(strtotime(date_format($params["from"], 'Y-m-d 00:00:00'))),
                '$lte' => new \MongoDate(strtotime(date_format($params["to"], 'Y-m-d 23:59:59')))
            ],
            '$or' => [
                ['group' => ['$ne' => Group::GROUP_EMPLOYEE]]
            ]
        ];

        $match = [
            '$match' => [
                '$and' => $filters
            ]
        ];

        if (isset($params["filters"]['accessPoints'])) {
            $orFilters = [];

            foreach ($params["filters"]['accessPoints'] as $ap) {
                $orFilters[] = [
                    'registrationMacAddress' => $ap
                ];
            }

            if (count($orFilters) > 0) {
                $match['$match']['$or'] = $orFilters;
            }
        }

        $collection = $this->getDocumentManager()
            ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
            ->aggregate(
                [
                    [
                        '$project' => [
                            'created' => [
                                '$subtract' => ['$created', DateTimeHelper::timezoneDifference()]
                            ],
                            'group' => true
                        ]
                    ],
                    $match,
                    [
                        '$group' => [
                            '_id'   => [ '$hour' => '$created' ],
                            'total' => [ '$sum' => 1 ],
                        ]
                    ],
                    [
                        '$sort' => [
                            'total' => -1
                        ]
                    ],
                    [
                        '$limit' => 10
                    ]
                ]
            )
        ;

        $result = $collection->toArray();

        return $result;
    }

    /**
     * @param $params
     * @param $fields
     * @return array
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function getGuestsByBirthDate($params, $fields)
    {
        $maxReportLinesPoc  = $params['maxReportLinesPoc'];
        $filters            = $params['filters'];
        $availableFields    = [];
        $options            = ["allowDiskUse" => true, "cursor" => ["batchSize" => 0]];

        foreach ($fields as $field) {
            array_push($availableFields, $field->getIdentifier());
        }

        if (in_array('data_nascimento', $availableFields)) {
            $pipeline = [];
            $project = ['$project' => [
                'month' => [
                    '$substr' => [
                        '$properties.data_nascimento', 5, 2
                    ]
                ],
                'mysql' => 1,
                'authorizeEmail' => 1
            ]];

            foreach ($fields as $field) {
                if ($field->getIdentifier() == 'data_nascimento') {
                    $project['$project']['properties'][$field->getIdentifier()] =
                        [ '$dateToString' => [ 'format' => "%d/%m/%Y", 'date'=> '$properties.data_nascimento' ] ];
                } else {
                    $project['$project']['properties'][$field->getIdentifier()] = '$properties.'.$field->getIdentifier();
                }
            }

            array_push($pipeline, $project);

            if ($filters) {
                array_push($pipeline, [
                    '$match' => [
                        '$or' => [
                            [
                                'month' => (string)$filters
                            ],
                            [
                                'month' => '0'.$filters
                            ]
                        ]
                    ]
                ]);
            }

            array_push($pipeline, [
                '$sort' => [
                    'month' => -1
                ]
            ]);

            if ($maxReportLinesPoc) {
                array_push($pipeline, [
                    '$limit' => $maxReportLinesPoc
                ]);
            }

            $collection = $this->getDocumentManager()
                ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
                ->aggregate($pipeline, $options)
            ;

            $results = $collection->toArray();

            return $results;
        } elseif (in_array('birthday', $availableFields)) {

            $project = [];
            $pipeline = [];

            $project['$project'] = ['mysql' => 1];
            foreach ($fields as $field) {
                if ($field->getIdentifier() == 'data_nascimento') {
                    $project['$project']['properties'][$field->getIdentifier()] =
                        [ '$dateToString' => [ 'format' => "%d/%m/%Y", 'date'=> '$properties.data_nascimento' ] ];
                } else {
                    $project['$project']['properties'][$field->getIdentifier()] = '$properties.'.$field->getIdentifier();
                }
            }

            if (!$filters) {
                array_push($pipeline, $project);

                $match = [
                    '$match' => [
                        'properties.birthday' => [
                            '$exists' => true
                        ]
                    ]
                ];

                array_push($pipeline, $match);

                $collection = $this->getDocumentManager()
                    ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
                    ->aggregate($pipeline, $options);
            } else {
                $match = [
                    '$match' => [
                        '$or' => [
                            [
                                'properties.birthday' => [
                                    '$regex' => '/' . $filters
                                ]
                            ],
                            [
                                'properties.birthday' => [
                                    '$regex' => '/0' . $filters
                                ]
                            ]
                        ]
                    ]
                ];

                array_push($pipeline, $project);
                array_push($pipeline, $match);

                $collection = $this->getDocumentManager()
                    ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
                    ->aggregate($pipeline, $options);
            }

            $result = $collection->toArray();

            if ($maxReportLinesPoc && $result) {
                $result = array_slice($result, 0, $maxReportLinesPoc);
            }
            return $result;
        } elseif (in_array('birthday_month', $availableFields)) {
            $project = [];
            $pipeline = [];

            $project['$project'] = ['mysql' => 1];
            foreach ($fields as $field) {
                if ($field->getIdentifier() == 'data_nascimento') {
                    $project['$project']['properties'][$field->getIdentifier()] =
                        [ '$dateToString' => [ 'format' => "%d/%m/%Y", 'date'=> '$properties.data_nascimento' ] ];
                } else {
                    $project['$project']['properties'][$field->getIdentifier()] = '$properties.'.$field->getIdentifier();
                }
            }

            array_push($pipeline, $project);

            if (!$filters) {
                $match = [
                    '$match' => [
                        'properties.birthday_month' => [
                            '$exists' => true
                        ]
                    ]
                ];

                array_push($pipeline, $match);

                $collection = $this->getDocumentManager()
                    ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
                    ->aggregate($pipeline, $options);
            } else {
                $match = [
                    '$match' => [
                        'properties.birthday_month' => (int)$filters
                    ]
                ];

                array_push($pipeline, $match);

                $collection = $this->getDocumentManager()
                    ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
                    ->aggregate($pipeline, $options);
            }

            $result = $collection->toArray();

            if ($maxReportLinesPoc && $result) {
                $result = array_slice($result, 0, $maxReportLinesPoc);
            }
            return $result;
        } else {
            return [];
        }
    }

    public function findBySocialId($socialId = '')
    {
        if (empty($socialId)) {
            return false;
        }

        $qb = $this->getDocumentManager()
            ->createQueryBuilder('Wideti\DomainBundle\Document\Guest\Guest');

        $result = $qb->field('social.id')
            ->in([$socialId])
            ->getQuery()
            ->getSingleResult();

        return $result;
    }

    public function findOneBy(array $criteria)
    {
        $loginField = $this->getLoginField();
        $guest      = parent::findOneBy($criteria);

        if (!$guest) {
            return null;
        }

        $guest->__set('loginField', $loginField->getIdentifier());

        return $guest;
    }

    public function findByIds($ids = [])
    {
        $qb = $this->createQueryBuilder()
            ->field('mysql')->in($ids)
            ->getQuery()
        ;

        return $qb;
    }

    /**
     * @return \Wideti\DomainBundle\Document\CustomFields\Field
     */
    private function getLoginField()
    {
        return $this->getDocumentManager()
            ->getRepository('DomainBundle:CustomFields\Field')
            ->findOneBy([
                'isLogin' => true
            ]);
    }

    public function getTotalGuestsPerDomain($domain)
    {
        return $this->getDocumentManager()
            ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
            ->count();
    }

    public function createQueryBuilder()
    {
        return parent::createQueryBuilder();
    }

    public function segmentFindByNameIs($value, $ids = [])
    {
        $search = $this
            ->createQueryBuilder()
            ->field('properties.name')->equals($value);

        if (!empty($ids)) {
            $search->addAnd($search->expr()->field('mysql')->in($ids));
        }

        return $search->getQuery();
    }

    public function segmentFindByNameIsNot($value, $ids = [])
    {
        $search = $this
            ->createQueryBuilder()
            ->field('properties.name')->notEqual($value);

        if (!empty($ids)) {
            $search->addAnd($search->expr()->field('mysql')->in($ids));
        }

        return $search->getQuery();
    }

    public function segmentFindByNameContains($value, $ids = [])
    {
        $search = $this
            ->createQueryBuilder()
            ->field('properties.name')->equals(new \MongoRegex('/.*'.$value.'.*/i'));

        if (!empty($ids)) {
            $search->addAnd($search->expr()->field('mysql')->in($ids));
        }

        return $search->getQuery();
    }

    public function segmentFindByNameDoesNotContain($value, $ids = [])
    {
        $search = $this
            ->createQueryBuilder()
            ->field('properties.name')->not(new \MongoRegex('/.*'.$value.'.*/i'));

        if (!empty($ids)) {
            $search->addAnd($search->expr()->field('mysql')->in($ids));
        }

        return $search->getQuery();
    }

    public function segmentFindByGenderIs($value, $ids = [])
    {
        $search = $this
            ->createQueryBuilder()
            ->field('properties.gender')->equals($value);

        if (!empty($ids)) {
            $search->addAnd($search->expr()->field('mysql')->in($ids));
        }

        return $search->getQuery();
    }

    public function segmentFindByDataNascimentoRange($value)
    {
        //TODO falta montar a query quando é passado $ids, além disso só está feito para clientes que tenha o custom field data_nascimento
        $range      = explode('|', $value);
        $dateFrom   = substr($range[0], 5, 5);
        $dateTo     = substr($range[1], 5, 5);

        $project    = [];
        $pipeline   = [];

        $project['$project']['properties']['data_nascimento'] =
            [ '$dateToString' => [ 'format' => "%m-%d", 'date' => '$properties.data_nascimento' ] ];

        $project['$project']['mysql'] = '$mysql';

        $match = [
            '$match' => [
                '$and' => [
                    [
                        'properties.data_nascimento' => [
                            '$gte' => $dateFrom,
                            '$lte' => $dateTo
                        ]
                    ]
                ]
            ]
        ];

        array_push($pipeline, $project);
        array_push($pipeline, $match);

        $results = $this->getDocumentManager()
            ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest')
            ->aggregate($pipeline);

        return $results;
    }

    /**
     * @param $value
     * @param array $ids
     * @param array $params
     * @return \Doctrine\ODM\MongoDB\Query\Query
     */
    public function segmentFindByCreatedRange($value, $ids = [], $params = [])
    {
        $range = explode('|', $value);

        $search = $this
            ->createQueryBuilder()
            ->field('created')
            ->gte(new \MongoDate(strtotime($range[0])))
            ->lte(new \MongoDate(strtotime($range[1])))
        ;

        if (!empty($ids)) {
            $search->addAnd($search->expr()->field('mysql')->in($ids));
        }

        if (!empty($params['download'])) {
            $search->skip($params['skip']);
            $search->limit(1000);
        }

        return $search->getQuery();
    }

    /**
     * @param $value
     * @param array $ids
     * @param array $params
     * @return \Doctrine\ODM\MongoDB\Query\Query
     */
    public function segmentFindByLastAcessRange($value, $ids = [], $params = [])
    {
        $range = explode('|', $value);

        $search = $this
            ->createQueryBuilder()
            ->field('lastAccess')
            ->gte(new \MongoDate(strtotime($range[0])))
            ->lte(new \MongoDate(strtotime($range[1])))
        ;

        if (!empty($ids)) {
            $search->addAnd($search->expr()->field('mysql')->in($ids));
        }

        if (!empty($params['download'])) {
            $search->skip($params['skip']);
            $search->limit(1000);
        }

        return $search->getQuery();
    }

    public function countUniqueOrRecurringByIds(array $guestIds, \DateTime $dateFrom, \DateTime $dateTo, $type)
    {
        $qb = $this
            ->createQueryBuilder();

        $qb->field('mysql')->in($guestIds);

        if ($type === 'unique') {
            $qb->addAnd($qb->expr()->field('returning')->equals(false));
        }

        if ($type === 'recurring') {
            $qb->addAnd($qb->expr()->field('returning')->equals(true));
        }

        $qb->addAnd(
            $qb->expr()
                ->field('created')
                ->gte(new MongoDate(strtotime(date_format($dateFrom, 'Y-m-d H:i:s'))))
                ->lte(new MongoDate(strtotime(date_format($dateTo, 'Y-m-d H:i:s'))))
        );

        return $qb->getQuery()->count();
    }

    /**
     * @param $stringDate
     * @return MongoDate
     * @throws \Exception
     */
    private function createMongoDateFromString($stringDate)
    {
        $birthDate = date_format(new \DateTime(str_replace('/', '-', $stringDate)), 'd-m-Y');
        return new \MongoDate(strtotime($birthDate));
    }

    /**
     * @param array $filters
     * @return bool
     */
    private function isFiltered($filters) {
        if ( !isset($filters['filtro']) || $filters['filtro'] === 'all') {
            return false;
        }

        if (empty($filters['filtro']) && empty($filters['value'])) {
            return false;
        }

        return true;
    }

    /**
     * @param array $filters
     * @param string $filterName
     * @return bool
     */
    private function hasFilter($filters, $filterName) {

        if (!$this->isFiltered($filters)) {
            return false;
        }

        return $filters['filtro'] === $filterName;
    }

    public function checkExistsPropertiesFieldInAllBase($field)
    {
        $qb = $this->createQueryBuilder()
            ->field("properties.{$field}")->exists(true)
            ->field("properties.{$field}")->notEqual('');
        
        $totalGuestsWithEmail = $qb->getQuery()->count();
        $totalGuests = $this->createQueryBuilder()->getQuery()->count();

        return $totalGuestsWithEmail == $totalGuests;
    }

    public function checkExistsPropertyInAllBase($identifier)
    {
        $qb = $this->createQueryBuilder();
        $qb->addOr($qb->expr()->field("properties.{$identifier}")->exists(false))
            ->addOr($qb->expr()->field("properties.{$identifier}")->equals(''))
            ->limit(1);
        
        $totalGuestsWithoutProperty = $qb->getQuery()->count();

        return $totalGuestsWithoutProperty == 0 ;
    }

    public function checkDuplicatePropertyInAllBase($identifier)
    {
        $collection = $this->getDocumentManager()
        ->getDocumentCollection('Wideti\DomainBundle\Document\Guest\Guest');

        $pipeline = [
            [
                '$group' => [
                    '_id' => "\$properties.$identifier",
                    'count' => ['$sum' => 1]
                ]
            ],
            [
                '$match' => [
                    'count' => ['$gt' => 1]
                ]
            ],
            [
                '$limit' => 1
            ]
        ];
        $options = ["allowDiskUse" => true, "cursor" => ["batchSize" => 0]];
        $result = $collection->aggregate($pipeline, $options);
        $resultArray = $result->toArray();

        return !empty($resultArray);
    }
}
