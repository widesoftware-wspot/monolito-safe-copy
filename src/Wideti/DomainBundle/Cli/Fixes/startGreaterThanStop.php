<?php

require_once __DIR__ . '/../../../../../app/bootstrap.php.cache';
require_once __DIR__ . '/../../../../../app/AppKernel.php';

use Symfony\Bundle\FrameworkBundle\Console\Application;

$kernel = new AppKernel('prod', true);
$kernel->boot();

$application = new Application($kernel);
$container  = $application->getKernel()->getContainer();
$input      = new \Symfony\Component\Console\Input\ArgvInput([]);
$output     = new \Symfony\Component\Console\Output\ConsoleOutput();
$questions  = new \Symfony\Component\Console\Helper\QuestionHelper();
$em         = $container->get('doctrine.orm.entity_manager');
$elastic    = $container->get('core.service.elastic_search');

$ids = [
    598,
    9544,
    8311,
    6931,
    8501,
    7317,
    6930,
    30,
    6780,
    596,
    7113,
    9279,
    88,
    90,
    7529,
    7028,
    6904,
    7080,
    7847,
    7769,
    7154,
    680,
    12,
    9480,
    327,
    80,
    7090,
    7813,
    44,
    658,
    7705,
    437,
    8070,
    455,
    336,
    106,
    7099,
    7408,
    7525,
    34,
    7502,
    32,
    7439,
    7989,
    536,
    8471,
    7536,
    7823,
    7045,
    8296,
    9036,
    52,
    6718,
    9232,
    8866,
    7708,
    7521,
    7810,
    427,
    4,
    8086,
    6743,
    519,
    8563,
    38,
    142,
    577,
    7524,
    8003,
    7378,
    319,
    8223,
    7213,
    7089,
    186,
    181,
    7608,
    607,
    78,
    7469,
    7731,
    8252,
    627,
    7296,
    7528,
    7162,
    8878,
    306,
    205,
    8486,
    8586,
    9649,
    36,
    8707,
    7516,
    540,
    177,
    7508,
    7538,
    8323,
    365,
    9513,
    7287,
    40,
    624,
    652,
    7828,
    309,
    360,
    6860,
    7749,
    7703,
    7728,
    8475,
    10752,
    7618,
    7771,
    466,
    419,
    357,
    8701,
    6779,
    8901,
    126,
    6862,
    8059,
    173,
    6921,
    439,
    158,
    7857,
    8908,
    6928,
    690,
    7164,
    120,
    7816,
    7302,
    7676,
    7795,
    684,
    8255,
    7650,
    7993,
    8688,
    9295,
    649,
    241,
    279,
    9924,
    6886,
    133,
    184,
    554,
    8436,
    7447,
    6742,
    8166,
    26,
    307,
    401,
    330,
    7727,
    7201,
    462,
    8195,
    84,
    7763,
    9751,
    7614,
    7776,
    8472,
    8716,
    9676,
    505,
    6823,
    8863,
    9022,
    7845,
    490,
    8478,
    6914,
    7712,
    10951,
    6990,
    527,
    381,
    574,
    7293,
    9840,
    449,
    7522,
    8301,
    10060,
    7182,
    8953,
    356,
    9091,
    8910,
    6964,
    404,
    468,
    6844,
    8120,
    6794,
    7994,
    8683,
    363,
    2177,
    7173,
    10038,
    7559,
    9955,
    10512,
    7456,
    8722,
    7443,
    7682,
    10126,
    340,
    7163,
    7591,
    382,
    513,
    7153,
    188,
    209,
    476,
    676,
    8053,
    8796,
    11037,
    10485,
    283,
    6994,
    9546,
    9648,
    7799,
    8174,
    8682,
    9843,
    10515,
    7160,
    8305,
    10117,
    10125,
    7566,
    9328,
    9921,
    10494,
    10497,
    7214,
    6984,
    8346,
    6956,
    9094,
    10119,
    10942,
    483,
    385,
    538,
    10930,
    384,
    589,
    7386,
    8216,
    9963,
    10050,
    6888,
    7420,
    9753,
    1442,
    6889,
    7486,
    10059,
    10950,
    6966,
    7554,
    7791,
    8728,
    9310,
    10518,
    6891,
    7012,
    7782,
    8171,
    9349,
    10096,
    6974,
    6992,
    7445,
    9397,
    11181,
    7018,
    8182,
    10128,
    10933,
    6962,
    9109,
    6705,
    6874,
    6925,
    6958,
    7004,
    7008,
    10408,
    6881,
    6996,
    8377,
    9309,
    9874,
    7006,
    7020,
    7406,
    7878,
    9577,
    10491,
    10509,
    10948,
    471,
    587,
    7510,
    7563,
    10,
    477,
    6849,
    7824,
    8217,
    10131,
    678,
    6978,
    7097,
    9376,
    10488,
    10936,
    10953,
    7002,
    8574,
    10053,
    10969,
    221,
    6960,
    8463,
    8686,
    8805,
    9372,
    10041,
    6986,
    7026,
    7219,
    7452,
    7535,
    7717,
    8036,
    8836,
    10062,
    6715,
    6968,
    7010,
    7110,
    9378,
    11256,
    11674,
    6982,
    7016,
    7024,
    8219,
    9994,
    10065,
    6863,
    6970,
    8073,
    8725,
    8968,
    9088,
    9853,
    458,
    517,
    6708,
    6879,
    6998,
    8055,
    8188,
    8192,
    9370,
    9726,
    9844,
    10044,
    10423,
    10779,
    11650,
    11676,
    511,
    6784,
    6935,
    7000,
    7448,
    7465,
    7513,
    7990,
    8605,
    9375,
    9499,
    10122,
    11268,
    7014,
    7022,
    7825,
    8958,
    9690,
    10051,
    10095,
    268,
    6980,
    7175,
    7714,
    7827,
    7882,
    7998,
    8513,
    8611,
    8791,
    9391,
    9714,
    9741,
    10767,
    11421,
    74,
    245,
    303,
    390,
    482,
    484,
    6972,
    7970,
    8695,
    9112,
    9720,
    9723,
    10045,
    10158,
    10783,
    10972,
    11271,
    11464,
    131,
    6876,
    7216,
    7229,
    8083,
    9336,
    9712,
    10035,
    10275,
    10506,
    258,
    6754,
    6864,
    6877,
    6927,
    7036,
    7694,
    7766,
    8388,
    8424,
    8815,
    8992,
    9100,
    9115,
    9384,
    9711,
    9717,
    9903,
    10108,
    10174,
    10261,
    10420,
    10782,
    10939,
    10956,
    11416,
    11551
];

$output->writeln("--------- PROCESSANDO ---------");

$exportFile = [];
$outfile = "startGreaterThanStop.csv";

$fp = fopen($outfile, "wb");
array_push($exportFile, "dominio;identifier;qtde accts;vendor");

foreach ($ids as $clientId) {
    $client = $em->getRepository('DomainBundle:Client')->findOneById($clientId);

    $accountings = $elastic->search(
        'radacct',
        [
            "size" => 0,
            "query" => [
                "filtered" => [
                    "filter" => [
                        "and" => [
                            "filters" => [
                                [
                                    "exists" => [
                                        "field" => "acctstoptime"
                                    ]
                                ],
                                [
                                    "script" => [
                                        "script" => "doc['acctstarttime'].value > doc['acctstoptime'].value"
                                    ]
                                ],
                                [
                                    "term" => [
                                        "client_id" => $client->getId()
                                    ]
                                ],
                                [
                                    "range" => [
                                        "acctstarttime" => [
                                            "gte" => "2017-08-01 00:00:00"
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            ],
            "aggs" => [
                "by_ap" => [
                    "terms" => [
                        "size" => 1000,
                        "field" => "calledstation_name"
                    ]
                ]
            ]
        ],
        'all'
    );

    if ($accountings['hits']['total'] == 0) continue;

    foreach ($accountings['aggregations']['by_ap']['buckets'] as $accounting) {
        $accessPoint = $em
            ->getRepository('DomainBundle:AccessPoints')
            ->findOneByFriendlyName($accounting['key']);

        $vendor = $accessPoint ? $accessPoint->getVendor() : '';

        array_push(
            $exportFile,
            $client->getDomain() .";".
            $accounting['key'] .";".
            $accounting['doc_count'] .";".
            $vendor
        );
    }
}

foreach ($exportFile as $item) {
    @fwrite($fp, $item . "\n");
}

@fclose($fp);

$output->writeln("----------- FIM -----------");
